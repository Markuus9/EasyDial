// easy_dial serà representat mitjançant arbre binari de cerca.

struct node_dial { 
    char _c; // clau amb la informació del caracter actual
    phone _p; // informació associada a la clau _c
    node_dial* _primfill; // branca fill
    node_dial* _seggerma; // branca seguent
};

// Punter a l'arrel de l'arbre
node_dial* _arrel;

// Prefix utilitzat per fer la cerca dels noms.
string _prefix;

// Bolea utilitzat per controlar l'estat del prefix
bool _indefinit;

// phone que conte la informació de l'actual
phone _actual;

// 
phone _maxim;

// Funció per crear nou nodes.
static node_dial* crea_node(const char &c, phone p, node_dial* pref, node_dial* seg);

// Retorna un node amb la copia de la informacio de pcopia;
static node_dial* copiar_nodes(node_dial* node_original);

// Esborra tots els elements del arbre.
static void esborra_nodes(node_dial* p);

// Insereix la clau p a l'arbre.
static node_dial* insereix(node_dial* t, nat i, const phone &p);

//
static void prefix(node_dial* t, vector<string>& res);

//
static void prefix(node_dial* t, nat i, const string& s,  vector<string>& result);

// Calcul de la longitud mitjana.
static void mitjana(node_dial* t, int i, double &freq, double &sumLong);

//
static void heapSort(vector<phone>& v);

//
static void heapify(vector<phone>& v, size_t n, size_t i);

//
static node_dial* cerca(const string& pref, nat i, node_dial* p);