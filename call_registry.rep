// call_registry serà representat mitjançant una taula de dispersió amb sinònims encadenats indirectes.
// Això farà que les consultes siguin molt eficients, però les insercions i eliminacions, en el cas pitjor,
// tindran cost lineal respecte el nombre d'elements de call_registry degut a la redispersió.

// Si el factor de càrrega (definit com el nombre d'elements de claus de la taula de dispersió dividit entre
// la mida de la taula) és major que 0.8 o menor que 0.2, es realitzarà una redispersió dels elements. En
// el primer cas, la mida de la taula serà el doble de gran. En l'altre cas, la mida de la taula es reduirà a
// la meitat.

// La nostra idea principal era representar call_registry amb un arbre binari de cerca equilibrat perquè
// les operacions de consulta, inserció i eliminació tinguessin cost logarítmic, però degut a que no teniem
// molt de temps per elaborar call_registry, hem optat per fer servir una taula de dispersió, que té
// costos temporals de consultes, insercions i eliminacions una mica més elevats

struct node_taula {
	nat _k;	// clau, que serà l'atribut _num del phone p
	phone _p; // informació associada a la clau _k
	node_taula* _seg; // punter al següent element de la llista simplement encadenada
};


node_taula** _taula; // taula amb punters a les llistes de sinònims
int _M; // nombre de punters a llistes simplement encadenades que conté _taula (mida de la taula)
nat _nelem; // nombre de claus, cadascuna amb el seu valor associat, que conté la taula

// Pre: pcopia apunta a nullptr o al primer element d'una llista simplement encadenada
// Post: Retorna un punter al primer element d'una llista simplement encadenada,
// que és una copia de la llista apuntada per pcopia
static node_taula* copia_nodes(node_taula* pcopia);

// Pre: p apunta a nullptr o a un element d'una llista simplement encadenada.
// Esborra tots els elements de la llista simplement encadenada
// encadenada apuntada per p
static void esborra_nodes(node_taula* p);

// Pre: cert
// Post: Calcula un valor de dispersió entre 0 i LONG_MAX a partir de x
static int hash(const nat &x);

// Pre: cert
// Post: Redimensiona la taula de dispersió amb una mida el doble que 
// l’anterior més un (_M => 2*_M+1) si augmentar és true. Altrament
// la mida de la taula de dispersió es redueix a la meitat (_M => _M/2)
void redispersio(bool augmentar);

// Pre: p apunta a un element d'una taula de dispersió que no es
// troba a la taula de dispersió del call_registry i aquest
// mètode és cridat dins del mètode privat "redispersio"
// Post: afegeix una còpia de l'element apuntat per p a
// la taula de dispersió del call_registry sense tenir en compte
// el factor de càrrega
void insereix(node_taula *pnode);

// Pre: cert
// Post Retorna el factor de càrrega de la taula de dispersió
// del call_registry (nombre d'elements entre mida de la taula)
float factor_de_carrega() const;
